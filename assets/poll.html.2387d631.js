import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";import{o as t,c as e,a as n,b as o,d as s,e as c,r as l}from"./app.1cf57b30.js";const i={},u=n("p",null,"\u4F60\u53EF\u80FD\u5728\u60F3\uFF0C\u6709\u6CA1\u6709\u4E00\u79CD\u529E\u6CD5\uFF0C\u53EF\u4EE5\u540C\u65F6\u76D1\u542C\u591A\u4E2Asocket\uFF0C\u7136\u540E\u53EA\u5904\u7406\u5176\u4E2D\u5DF2\u7ECF\u6709\u6570\u636E\u7684socket\u5462\uFF1F\u8FD9\u6837\u7684\u8BDD\u6211\u4EEC\u5C31\u4E0D\u7528\u50BB\u4E4E\u4E4E\u5730\u4E0D\u505C\u8F6E\u8BE2\uFF0C\u6765\u68C0\u67E5\u54EA\u4E9Bsocket\u5DF2\u7ECF\u6709\u6570\u636E\u4E86\u3002",-1),d=s("\u8B66\u544A\uFF1A\u968F\u7740\u8FDE\u63A5\u6570\u53D8\u5F97\u5DE8\u5927\uFF0Cpoll()\u51FD\u6570\u4F1A\u53D8\u5F97\u5DE8\u6162\uFF01\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u63A8\u8350\u4F60\u4F7F\u7528"),k={href:"https://libevent.org/",target:"_blank",rel:"noopener noreferrer"},r=s("libevent"),v=s("\u8FD9\u6837\u7684\u4E8B\u4EF6\u3002\u5B83\u4F1A\u5C1D\u8BD5\u4F7F\u7528\u4F60\u7CFB\u7EDF\u4E0A\u53EF\u7528\u7684\u6700\u5FEB\u65B9\u6CD5\uFF0C\u83B7\u5F97\u66F4\u597D\u7684\u6027\u80FD\u3002"),m=c(`<p>\u90A3\u600E\u4E48\u907F\u514Dpoll\uFF08\u8F6E\u8BE2\uFF09\u5462\uFF1F\u8BF4\u8D77\u6765\u6709\u70B9\u641E\u7B11\uFF0C\u4F60\u53EF\u4EE5\u4F7F\u7528<code>poll()</code>\u8FD9\u4E2A\u7CFB\u7EDF\u8C03\u7528\u6765\u907F\u514Dpoll\uFF08\u8F6E\u8BE2\uFF09\u3002\u672C\u8D28\u4E0A\uFF0C\u6211\u4EEC\u90FD\u662F\u8BA9\u5185\u6838\u6765\u66FF\u6211\u4EEC\u505A\u5404\u79CD\u810F\u6D3B\u7D2F\u6D3B\uFF0C\u7136\u540E\u544A\u8BC9\u6211\u4EEC\u54EA\u4E9Bsocket\u6709\u6570\u636E\u53EF\u8BFB\u4E86\u3002\u6CA1\u6709\u6570\u636E\u53EF\u8BFB\u7684\u65F6\u5019\u6211\u4EEC\u7684\u8FDB\u7A0B\u53EF\u4EE5\u5904\u4E8E\u4F11\u7720\u72B6\u6001\uFF0C\u4E0D\u4F1A\u5360\u7528CPU\u3002</p><p>\u4E00\u822C\u7684\u505A\u6CD5\u662F\u7EF4\u62A4\u4E00\u4E2A <code>struct pollfd</code>\u7684\u6570\u7EC4\uFF0C\u5176\u4E2D\u5305\u542B\u6211\u4EEC\u60F3\u8981\u76D1\u542C\u7684<code>socket descriptor</code>\u4EE5\u53CA\u6211\u4EEC\u60F3\u8981\u76D1\u542C\u7684\u4E8B\u4EF6\u7C7B\u578B\u7684\u4FE1\u606F\u3002\u5185\u6838\u4F1A\u963B\u585E\u5728<code>poll()</code>\u8FD9\u4E2A\u8C03\u7528\u4E0A\uFF0C\u76F4\u5230\u4F60\u5173\u6CE8\u7684\u5176\u4E2D\u4E00\u4E2A\u4E8B\u4EF6\u53D1\u751F\uFF08\u6BD4\u5982\u201Csocket ready to read\uFF01\u201D\uFF09\u6216\u76F4\u5230\u53D1\u751F\u7528\u6237\u6307\u5B9A\u8D85\u65F6\u3002</p><p>\u62FFTCP Server\u7AEF\u7A0B\u5E8F\u4E3E\u4E2A\u4F8B\u5B50\uFF0C\u4E0B\u9762\u7684\u4EE3\u7801\u5176\u5B9E\u8FD8\u662F<code>blocking</code>\u7684\u4EE3\u7801\uFF0C\u5199\u51FA\u6765\u5C31\u662F\u4E3A\u4E86\u65B9\u4FBF\u6211\u7FFB\u8BD1\u539F\u6587\u7684\u4E00\u53E5\u8BDD\uFF08\u5982\u679C\u786C\u7FFB\u8BD1\u5B9E\u5728\u662F\u4E0D\u597D\u7406\u89E3\uFF09\u3002\u6839\u636E\u5957\u8DEF\u7F16\u5199\u4E864\u6B65\u6D41\u7A0B\uFF1A<code>socket()</code>\u3001<code>bind()</code>\u3001<code>listen()</code>\u4EE5\u53CA<code>accept()</code>\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> new_fd<span class="token punctuation">;</span>  

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>XXX<span class="token punctuation">,</span>XXX<span class="token punctuation">,</span>XXX<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> XXX<span class="token punctuation">,</span> XXX<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>


<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">listen</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> BACKLOG<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
 
  new_fd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> XXX<span class="token punctuation">,</span> XXX<span class="token punctuation">)</span><span class="token punctuation">;</span>
 	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5728<code>blocking</code>\u4EE3\u7801\u4E2D\uFF0C\u7A0B\u5E8F\u4F1A\u963B\u585E\u5728<code>accept()</code>\uFF0C\u76F4\u5230\u6709\u4E00\u4E2AClient\u8FDE\u63A5\u4E0A\u6765\u3002\u4F46\u662F\u5728<code>non-blocking</code>\u7A0B\u5E8F\u4E2D\uFF0C\u6709Client\u8FDE\u63A5\u4E0A\u6765\u51C6\u5907\u88AB<code>accept()</code>\u8C03\u7528\u4E4B\u524D\uFF0C<code>sockfd</code>\u5C31\u4F1A\u76F4\u63A5\u544A\u8BC9\u6211\u4EEC\u6709\u4E00\u4E2A\u65B0\u7684\u8FDE\u63A5\u6765\u4E86\uFF0C\u6211\u4EEC\u63A5\u7740\u627E\u5230\u4ED6\uFF0C\u7136\u540E<code>accept()</code>\u5904\u7406\u5373\u53EF\u3002\u5927\u5BB6\u53EF\u4EE5\u5BF9\u6BD4\u4E00\u4E0B\u8FD9\u4E24\u8005\u4E4B\u95F4\u7684\u533A\u522B\u3002</p><p>\u8BF4\u5F97\u4E0D\u5C11\u4E86\uFF0C\u770B\u4E00\u4E0B<code>poll()</code>\u7684\u7528\u6CD5\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;poll.h&gt;</span></span>

<span class="token comment">//\u8FD4\u56DE\uFF1A \u5982\u679C\u6709\u5C31\u7EEA\u7684\u63CF\u8FF0\u7B26\u5219\u4E3A\u5176\u6570\u76EE\uFF0C\u82E5\u8D85\u65F6\u8FD4\u56DE0\uFF0C\u82E5\u51FA\u9519\u8FD4\u56DE-1</span>
<span class="token keyword">int</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pollfd</span> fds<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">nfds_t</span> nfds<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>fds</code>\u662F\u4E00\u4E2A\u7ED3\u6784\u6570\u7EC4\uFF0C\u6570\u7EC4\u4E2D\u6BCF\u4E2A\u5143\u7D20\u90FD\u662F\u4E00\u4E2A<code>pollfd</code>\u7ED3\u6784\uFF0C\u4FDD\u5B58\u4E86\u300C\u76D1\u542C\u54EA\u4E2Asocket\u7684\u4EC0\u4E48\u4E8B\u4EF6\u300D\u7684\u4FE1\u606F\uFF1B<code>nfds</code>\u662F\u6570\u7EC4\u7684\u6570\u91CF\uFF1B<code>timeout</code>\u662F\u8BBE\u7F6E\u7684\u8D85\u65F6\u65F6\u95F4\uFF0C\u4EE5\u6BEB\u79D2\u4E3A\u5355\u4F4D\u3002<code>poll()</code>\u8FD4\u56DE\u5C31\u7EEA\uFF08\u6709\u65F6\u95F4\u53D1\u751F\uFF09\u7684\u63CF\u8FF0\u7B26\u6570\u91CF\uFF0C\u82E5\u8D85\u65F6\u8FD4\u56DE<code>0</code>\uFF0C\u82E5\u51FA\u9519\u8FD4\u56DE<code>-1</code>\u3002</p><p>\u6211\u4EEC\u770B\u4E00\u4E0B<code>pollfd</code>\u7ED3\u6784\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">pollfd</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> fd<span class="token punctuation">;</span>         <span class="token comment">// the socket descriptor</span>
  <span class="token keyword">short</span> events<span class="token punctuation">;</span>   <span class="token comment">// \u6211\u4EEC\u611F\u5174\u8DA3\u7684\u4E8B\u4EF6\u7EC4\u6210\u7684 bitmap</span>
  <span class="token keyword">short</span> revents<span class="token punctuation">;</span>  <span class="token comment">// poll() \u8FD4\u56DE\u65F6\uFF0C\u5DF2\u53D1\u751F\u4E8B\u4EF6\u7EC4\u6210\u7684 bitmap</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>fd</code>\u8868\u793A\u7684\u5C31\u662F\u4F60\u60F3\u76D1\u542C\u7684<code>socket descriptor</code>\uFF0C\u901A\u8FC7\u8BBE\u7F6E<code>events</code>\u5B57\u6BB5\u6765\u6307\u5B9A\u6211\u4EEC\u611F\u5174\u8DA3\u7684\u4E8B\u4EF6\u7C7B\u578B\u3002</p><p>events\u5B57\u6BB5\u65F6\u4E0B\u8868\u4E2D\u503C\u7684\u6309\u4F4D\u6216\uFF1A</p><table><thead><tr><th style="text-align:center;">\u5E38\u503C</th><th style="text-align:center;">\u8BF4\u660E</th></tr></thead><tbody><tr><td style="text-align:center;">POLLIN</td><td style="text-align:center;">\u5F53\u6570\u636E\u53EF\u8BFB\u65F6\uFF08recv()\u53EF\u8BFB\uFF09\uFF0C\u63D0\u9192\u6211</td></tr><tr><td style="text-align:center;">POLLOUT</td><td style="text-align:center;">\u5F53\u6570\u636E\u53EF\u5199\u65F6\uFF08send()\u53EF\u5199\uFF09\uFF0C\u63D0\u9192\u6211</td></tr></tbody></table><p>\u5F97\u5230<code>struct pollfd</code>\u6570\u7EC4\u4E4B\u540E\uFF0C\u4F60\u5C31\u53EF\u4EE5\u5C06\u5176\u4F20\u7ED9<code>poll()</code>\u51FD\u6570\u4E86\uFF0C\u540C\u65F6\u4F20\u9012\u7684\u8FD8\u6709\u6570\u7EC4\u7684\u957F\u5EA6\u4EE5\u53CA\u4EE5\u6BEB\u79D2\u4E3A\u5355\u4F4D\u7684\u8D85\u65F6\u65F6\u95F4\uFF08\u4F60\u4E5F\u53EF\u4EE5\u6307\u5B9A\u4E00\u4E2A\u8D1F\u6570\uFF0C\u8868\u793A\u6C38\u4E45\u7B49\u5F85\uFF09\u3002</p><p><code>poll()</code>\u8FD4\u56DE\u4E4B\u540E\uFF0C\u4F60\u53EF\u4EE5\u68C0\u67E5<code>revents</code>\u5B57\u6BB5\uFF0C\u67E5\u770B\u662F\u5426\u8BBE\u7F6E\u4E86<code>POLLIN</code>\u6216<code>POLLOUT</code>\uFF0C\u6765\u5224\u65AD\u662F\u5426\u6709\u4E8B\u4EF6\u53D1\u751F\u3002</p><blockquote><p>\u5B9E\u9645\u4E0A\uFF0C\u4F60\u53EF\u4EE5\u4F7F\u7528<code>poll()</code>\u8FDB\u884C\u66F4\u591A\u64CD\u4F5C\uFF0C\u66F4\u591A\u7EC6\u8282\uFF0C\u53C2\u89C1\u540E\u6587\u7684<code>poll()</code>\u4F7F\u7528\u624B\u518C\u3002</p></blockquote><p>\u4E0B\u9762\u7ED9\u51FA\u4E00\u4E2A\u4F8B\u5B50\uFF0C\u5F53\u4F60\u5728\u547D\u4EE4\u884C\u6572\u51FB\u4E00\u4E0B\u56DE\u8F66\u6216\u8005\u7B492.5\u79D2\u949F\uFF0C\u4F60\u4F1A\u770B\u5230<code>poll()</code>\u8FD4\u56DE\u7684\u4E0D\u540C\u72B6\u6001\uFF0C\u8FD0\u884C\u4E00\u4E0B\u8BD5\u8BD5\u5427\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;poll.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">pollfd</span> pfds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u5982\u679C\u4F60\u9700\u8981\u76D1\u542C\u66F4\u591A\u7684socket\uFF0C\u5C31\u8BBE\u7F6E\u5F97\u66F4\u5927\u4E00\u70B9</span>

    pfds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment">// 0 \u8868\u793A\u6807\u51C6\u8F93\u5165</span>
    pfds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">=</span> POLLIN<span class="token punctuation">;</span> <span class="token comment">// Tell me when ready to read</span>

    <span class="token comment">// If you needed to monitor other things, as well:</span>
    <span class="token comment">//pfds[1].fd = some_socket; // Some socket descriptor</span>
    <span class="token comment">//pfds[1].events = POLLIN;  // Tell me when ready to read</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hit RETURN or wait 2.5 seconds for timeout\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> num_events <span class="token operator">=</span> <span class="token function">poll</span><span class="token punctuation">(</span>pfds<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2.5 second timeout</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>num_events <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Poll timed out!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> pollin_happened <span class="token operator">=</span> pfds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLIN<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>pollin_happened<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;File descriptor %d is ready to read\\n&quot;</span><span class="token punctuation">,</span> pfds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpected event occurred: %d\\n&quot;</span><span class="token punctuation">,</span> pfds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>revents<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5F3A\u8C03\u4E00\u4E0B\uFF0C<code>poll()</code>\u8FD4\u56DE\u7684\u662F<code>pfds</code>\u6570\u7EC4\u4E2D\u6709\u4E8B\u4EF6\u53D1\u751F\u7684\u5143\u7D20\u6570\u91CF\uFF0C\u4F46\u662F\u5E76\u4E0D\u4F1A\u544A\u8BC9\u4F60\u6570\u7EC4\u4E2D\u6709\u54EA\u4E9B\u5143\u7D20\uFF08\u4F60\u9700\u8981\u5FAA\u73AF\u5224\u65AD\uFF09\u6709\u4E8B\u4EF6\u53D1\u751F\u3002</p><p>\u968F\u4E4B\u800C\u6765\u4F1A\u51FA\u73B0\u51E0\u4E2A\u95EE\u9898\u3002</p><p>\u5982\u4F55\u5411\u4F20\u9012\u7ED9<code>poll()</code>\u7684\u6570\u7EC4\u4E2D\u6DFB\u52A0\u65B0\u7684<code>file descriptor</code>\uFF1F\u4F60\u53EA\u8981\u786E\u4FDD\u6570\u7EC4\u4E2D\u6709\u8DB3\u591F\u7684\u7A7A\u95F4\u6765\u6EE1\u8DB3\u4F60\u7684\u9700\u6C42\u5373\u53EF\uFF0C\u6216\u8005\u6839\u636E\u4F60\u7684\u9700\u6C42\u8C03\u7528 <code>realloc()</code> \u91CD\u65B0\u5206\u914D\u5185\u5B58\u3002</p><p>\u600E\u4E48\u5220\u9664<code>pfds</code>\u4E2D\u7684\u5143\u7D20\u5462\uFF1F\u4F60\u53EF\u4EE5\u5C06<code>pfds</code>\u4E2D\u7684\u6700\u540E\u4E00\u4E2A\u6570\u636E\uFF08\u5B9E\u9645\u6709\u7528\u7684\u6570\u636E\uFF09\u590D\u5236\u5230\u4F60\u60F3\u5220\u9664\u7684\u4F4D\u7F6E\u4E0A\uFF0C\u7136\u540E\u5C06\u4F20\u7ED9<code>poll()</code>\u7684\u6570\u7EC4\u957F\u5EA6\u53C2\u6570 - 1\u3002\u6216\u8005\u4F60\u4E5F\u53EF\u4EE5\u5C06\u4F60\u60F3\u5220\u9664\u7684\u5143\u7D20\u8BBE\u7F6E\u4E3A\u8D1F\u6570\uFF0C<code>poll()</code>\u4F1A\u5FFD\u7565\u5B83\u7684\u3002</p><p>\u63A5\u4E0B\u6765\u770B\u4E00\u4E2A\u7A0D\u5FAE\u9EBB\u70E6\u70B9\u513F\u7684\u4F8B\u5B50\uFF0C\u7528<code>poll()</code>\u7F16\u5199\u4E00\u4E2A\u804A\u5929\u5BA4\u3002</p><p>\u6211\u4EEC\u9700\u8981\u542F\u52A8\u4E00\u4E2A<code>listener socket</code>\uFF0C\u5E76\u5C06\u5176\u6DFB\u52A0\u5230<code>poll()</code>\u7684<code>file descriptors</code>\u96C6\u5408\u4E2D\uFF0C\u8FD9\u6837\u6211\u4EEC\u5C31\u80FD\u901A\u8FC7\u5B83\u5224\u65AD\u662F\u4E0D\u662F\u6709Client\u8FDE\u63A5\u4E0A\u6765\u4E86\u3002</p><p>\u7136\u540E\u6211\u4EEC\u628A\u65B0\u8FDE\u63A5\u6DFB\u52A0\u5230<code>struct pollfd</code>\u6570\u7EC4\u4E2D\uFF0C\u6839\u636E\u6211\u4EEC\u5B9E\u9645\u9700\u8981\u52A8\u6001\u8C03\u6574\u5B83\u7684\u5BB9\u91CF\u3002\u5F53\u8FDE\u63A5\u65AD\u5F00\u65F6\uFF0C\u6211\u4EEC\u518D\u5C06\u5176\u4ECE\u6570\u7EC4\u4E2D\u6E05\u9664\u3002</p><p>\u5F53\u8FDE\u63A5\u4E2D\u6709\u6570\u636E\u53EF\u8BFB\u65F6\uFF0C\u6211\u4EEC\u4ECE\u4E2D\u5C06\u6570\u636E\u53D6\u51FA\u5E76\u5C06\u5176\u8F6C\u53D1\u5230\u5176\u4ED6\u8FDE\u63A5\u4E2D\uFF0C\u8FD9\u6837\u5C31\u5B9E\u73B0\u4E86\u804A\u5929\u5BA4\u7684\u529F\u80FD\u3002</p><p>\u4E0B\u9762\u7ED9\u51FA<code>pollserver.c</code>\u7684\u4EE3\u7801\u3002\u4F60\u53EF\u4EE5\u5728\u4E00\u4E2A\u7A97\u53E3\u4E2D\u8FD0\u884C\u5B83\uFF0C\u7136\u540E\u5728\u5176\u4ED6\u547D\u4EE4\u884C\u7A97\u53E3\u4E2D\u6267\u884C<code>telnet localhost 9034</code>\u3002\u4E4B\u540E\u4F60\u5728\u5404\u4E2A\u7A97\u53E3\u547D\u4EE4\u884C\u4E2D\u8F93\u5165\u7684\u4FE1\u606F\uFF08\u8BB0\u5F97\u6572\u56DE\u8F66\uFF09\uFF0C\u5C31\u53EF\u4EE5\u5728\u5176\u4ED6\u7A97\u53E3\u4E2D\u770B\u5230\u4E86\u3002</p><p>\u4E0D\u4EC5\u5982\u6B64\uFF0C\u5F53\u4F60\u8F93\u5165<code>quit</code>\u63A8\u51FA<code>telnet</code>\u65F6\uFF0C\u670D\u52A1\u7AEF\u4F1A\u68C0\u6D4B\u5230\u8FDE\u63A5\u65AD\u5F00\uFF0C\u5E76\u4E14\u4ECE<code>file descriptor</code>\u6570\u7EC4\u4E2D\u5C06\u5176\u79FB\u51FA\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/*
** pollserver.c -- a cheezy multiperson chat server
*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;poll.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PORT</span> <span class="token string">&quot;9034&quot;</span>   <span class="token comment">// Port we&#39;re listening on</span></span>

<span class="token comment">// Get sockaddr, IPv4 or IPv6:</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">get_in_addr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>sa<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sa<span class="token operator">-&gt;</span>sa_family <span class="token operator">==</span> AF_INET<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token operator">*</span><span class="token punctuation">)</span>sa<span class="token punctuation">)</span><span class="token operator">-&gt;</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in6</span><span class="token operator">*</span><span class="token punctuation">)</span>sa<span class="token punctuation">)</span><span class="token operator">-&gt;</span>sin6_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Return a listening socket</span>
<span class="token keyword">int</span> <span class="token function">get_listener_socket</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> listener<span class="token punctuation">;</span>     <span class="token comment">// Listening socket descriptor</span>
    <span class="token keyword">int</span> yes<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// For setsockopt() SO_REUSEADDR, below</span>
    <span class="token keyword">int</span> rv<span class="token punctuation">;</span>

    <span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> hints<span class="token punctuation">,</span> <span class="token operator">*</span>ai<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>

    <span class="token comment">// Get us a socket and bind it</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hints<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> hints<span class="token punctuation">)</span><span class="token punctuation">;</span>
    hints<span class="token punctuation">.</span>ai_family <span class="token operator">=</span> AF_UNSPEC<span class="token punctuation">;</span>
    hints<span class="token punctuation">.</span>ai_socktype <span class="token operator">=</span> SOCK_STREAM<span class="token punctuation">;</span>
    hints<span class="token punctuation">.</span>ai_flags <span class="token operator">=</span> AI_PASSIVE<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rv <span class="token operator">=</span> <span class="token function">getaddrinfo</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hints<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ai<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;selectserver: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">gai_strerror</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> ai<span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>ai_next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        listener <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>ai_family<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>ai_socktype<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>ai_protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>listener <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// Lose the pesky &quot;address already in use&quot; error message</span>
        <span class="token function">setsockopt</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_REUSEADDR<span class="token punctuation">,</span> <span class="token operator">&amp;</span>yes<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>ai_addr<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>ai_addrlen<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">close</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">freeaddrinfo</span><span class="token punctuation">(</span>ai<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// All done with this</span>

    <span class="token comment">// If we got here, it means we didn&#39;t get bound</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Listen</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">listen</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> listener<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Add a new file descriptor to the set</span>
<span class="token keyword">void</span> <span class="token function">add_to_pfds</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pollfd</span> <span class="token operator">*</span>pfds<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> newfd<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>fd_count<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>fd_size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// If we don&#39;t have room, add more space in the pfds array</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>fd_count <span class="token operator">==</span> <span class="token operator">*</span>fd_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>fd_size <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Double it</span>

        <span class="token operator">*</span>pfds <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span><span class="token operator">*</span>pfds<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>pfds<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>fd_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">(</span><span class="token operator">*</span>pfds<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">*</span>fd_count<span class="token punctuation">]</span><span class="token punctuation">.</span>fd <span class="token operator">=</span> newfd<span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>pfds<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">*</span>fd_count<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">=</span> POLLIN<span class="token punctuation">;</span> <span class="token comment">// Check ready-to-read</span>

    <span class="token punctuation">(</span><span class="token operator">*</span>fd_count<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Remove an index from the set</span>
<span class="token keyword">void</span> <span class="token function">del_from_pfds</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pollfd</span> pfds<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>fd_count<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Copy the one from the end over this one</span>
    pfds<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pfds<span class="token punctuation">[</span><span class="token operator">*</span>fd_count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span><span class="token operator">*</span>fd_count<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Main</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> listener<span class="token punctuation">;</span>     <span class="token comment">// Listening socket descriptor</span>

    <span class="token keyword">int</span> newfd<span class="token punctuation">;</span>        <span class="token comment">// Newly accept()ed socket descriptor</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_storage</span> remoteaddr<span class="token punctuation">;</span> <span class="token comment">// Client address</span>
    <span class="token class-name">socklen_t</span> addrlen<span class="token punctuation">;</span>

    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// Buffer for client data</span>

    <span class="token keyword">char</span> remoteIP<span class="token punctuation">[</span>INET6_ADDRSTRLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// Start off with room for 5 connections</span>
    <span class="token comment">// (We&#39;ll realloc as necessary)</span>
    <span class="token keyword">int</span> fd_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> fd_size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">pollfd</span> <span class="token operator">*</span>pfds <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token operator">*</span>pfds <span class="token operator">*</span> fd_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Set up and get a listening socket</span>
    listener <span class="token operator">=</span> <span class="token function">get_listener_socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>listener <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;error getting listening socket\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Add the listener to set</span>
    pfds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fd <span class="token operator">=</span> listener<span class="token punctuation">;</span>
    pfds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">=</span> POLLIN<span class="token punctuation">;</span> <span class="token comment">// Report ready to read on incoming connection</span>

    fd_count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// For the listener</span>

    <span class="token comment">// Main loop</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> poll_count <span class="token operator">=</span> <span class="token function">poll</span><span class="token punctuation">(</span>pfds<span class="token punctuation">,</span> fd_count<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>poll_count <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;poll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Run through the existing connections looking for data to read</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fd_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// Check if someone&#39;s ready to read</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pfds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLIN<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// We got one!!</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>pfds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fd <span class="token operator">==</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// If listener is ready to read, handle new connection</span>

                    addrlen <span class="token operator">=</span> <span class="token keyword">sizeof</span> remoteaddr<span class="token punctuation">;</span>
                    newfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span>
                        <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>remoteaddr<span class="token punctuation">,</span>
                        <span class="token operator">&amp;</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>newfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;accept&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token function">add_to_pfds</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pfds<span class="token punctuation">,</span> newfd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fd_count<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fd_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;pollserver: new connection from %s on &quot;</span>
                            <span class="token string">&quot;socket %d\\n&quot;</span><span class="token punctuation">,</span>
                            <span class="token function">inet_ntop</span><span class="token punctuation">(</span>remoteaddr<span class="token punctuation">.</span>ss_family<span class="token punctuation">,</span>
                                <span class="token function">get_in_addr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>remoteaddr<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                remoteIP<span class="token punctuation">,</span> INET6_ADDRSTRLEN<span class="token punctuation">)</span><span class="token punctuation">,</span>
                            newfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// If not the listener, we&#39;re just a regular client</span>
                    <span class="token keyword">int</span> nbytes <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>pfds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">int</span> sender_fd <span class="token operator">=</span> pfds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fd<span class="token punctuation">;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nbytes <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// Got error or connection closed by client</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>nbytes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// Connection closed</span>
                            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;pollserver: socket %d hung up\\n&quot;</span><span class="token punctuation">,</span> sender_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;recv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>

                        <span class="token function">close</span><span class="token punctuation">(</span>pfds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Bye!</span>

                        <span class="token function">del_from_pfds</span><span class="token punctuation">(</span>pfds<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fd_count<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token comment">// We got some good data from a client</span>

                        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> fd_count<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// Send to everyone!</span>
                            <span class="token keyword">int</span> dest_fd <span class="token operator">=</span> pfds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>fd<span class="token punctuation">;</span>

                            <span class="token comment">// Except the listener and ourselves</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>dest_fd <span class="token operator">!=</span> listener <span class="token operator">&amp;&amp;</span> dest_fd <span class="token operator">!=</span> sender_fd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">send</span><span class="token punctuation">(</span>dest_fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> nbytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;send&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token comment">// END handle data from client</span>
            <span class="token punctuation">}</span> <span class="token comment">// END got ready-to-read from poll()</span>
        <span class="token punctuation">}</span> <span class="token comment">// END looping through file descriptors</span>
    <span class="token punctuation">}</span> <span class="token comment">// END for(;;)--and you thought it would never end!</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5728\u4E0B\u4E00\u8282\uFF0C\u6211\u4EEC\u4F1A\u770B\u5B66\u5230\u4E00\u4E2A\u529F\u80FD\u7C7B\u4F3C\uFF0C\u4F46\u662F\u66F4\u8001\u7684\u4E00\u4E2A\u51FD\u6570<code>select()</code>\u3002<code>poll()</code>\u548C<code>select()</code>\u4E24\u8005\u529F\u80FD\u7C7B\u4F3C\uFF0C\u6027\u80FD\u4E5F\u5DEE\u4E0D\u592A\u591A\uFF0C\u533A\u522B\u4E3B\u8981\u5728\u4E8E\u5B83\u4EEC\u7684\u7528\u6CD5\u3002</p><p>\u76F8\u6BD4\u4E4B\u4E0B\uFF0C<code>select()</code>\u7684\u53EF\u79FB\u690D\u6027\u7A0D\u5FAE\u5F3A\u4E00\u70B9\uFF0C\u4F46\u662F\u4F7F\u7528\u8D77\u6765\u7A0D\u663E\u7B28\u62D9\u3002\u5B66\u5B8C\u4E0B\u4E00\u8282\u4E4B\u540E\uFF0C\u6839\u636E\u4F60\u7684\u7CFB\u7EDF\u652F\u6301\u60C5\u51B5\uFF0C\u9009\u62E9\u4E00\u4E2A\u4F60\u6700\u559C\u6B22\u7684\u5373\u53EF\u3002</p>`,31);function b(f,y){const a=l("ExternalLinkIcon");return t(),e("div",null,[u,n("blockquote",null,[n("p",null,[d,n("a",k,[r,o(a)]),v])]),m])}var h=p(i,[["render",b],["__file","poll.html.vue"]]);export{h as default};
