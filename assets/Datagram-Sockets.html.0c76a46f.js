import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,e as t}from"./app.df556a34.js";const p={},e=t(`<p><code>UDP datagram socket</code> \u7684\u57FA\u7840\u6211\u4EEC\u5728<code>sendto()</code>\u548C<code>recvfrom()</code>\u90A3\u4E00\u8282\u7684\u5DF2\u7ECF\u8BB2\u8FC7\u4E86\u3002\u672C\u8282\uFF0C\u6211\u5C06\u7ED9\u51FA\u4E24\u6BB5\u7A0B\u5E8F\uFF1A <code>talker.c</code> \u548C <code>listener.c</code>\u3002</p><p><code>listener.c</code>\u8FD0\u884C\u5728\u4E3B\u673A\u4E0A\u4E00\u76F4\u7B49\u5F85\u7740\u53BB\u5F80<code>4950</code>\u7AEF\u53E3\u7684\u6570\u636E\u5305\u3002<code>talker</code>\u5C06\u7528\u6237\u5728\u547D\u4EE4\u884C\u8F93\u5165\u7684\u6570\u636E\u4ECE\u6307\u5B9A\u7684\u4E3B\u673A\u53D1\u5F80<code>4950</code>\u7AEF\u53E3\u3002</p><p>\u56E0\u4E3A<code>datagram sockets</code>\u662F\u65E0\u8FDE\u63A5\u7684\uFF0C\u56E0\u6B64\u53EA\u9700\u8981\u628A\u6570\u636E\u5305\u901A\u8FC7\u4EE5\u592A\u7F51\u53D1\u9001\u51FA\u53BB\u5C31\u884C\uFF0C\u752D\u7BA1\u6210\u529F\u5931\u8D25\u3002</p><p>\u6B64\u5916\uFF0C\u7A0B\u5E8F\u4E2D\u6211\u4EEC\u4EE4Client\u548CServer\u90FD\u4F7F\u7528IPv6\u3002\u8FD9\u6837\u4EE5\u6765\u5C31\u907F\u514D\u4E86Server\u6BB5\u4F7F\u7528IPv6\uFF0C\u800CClient\u4F7F\u7528IPv4\u5BFC\u81F4\u6570\u636E\u4E0D\u4F1A\u88AB\u63A5\u6536\u7684\u8FD9\u79CD\u60C5\u51B5\u3002</p><blockquote><p>\u5B9E\u9645\u4E0A\uFF0C\u5728\u4F7F\u7528<code>TCP stream sockets</code>\u7684\u60C5\u51B5\u4E0B\uFF0C\u6211\u4EEC\u4F9D\u7136\u53EF\u80FD\u4F1A\u78B0\u5230\u5730\u5740\u65CF\u4E0D\u5339\u914D\u7684\u60C5\u51B5\uFF0C\u4F46\u662F\u7531\u4E8E\u6211\u4EEC\u4F1A\u4F7F\u7528<code>connect()</code>\u51FD\u6570\uFF0C\u5982\u679C\u56E0\u4E3A\u5730\u5740\u65CF\u7684\u95EE\u9898\u5BFC\u81F4<code>connect()</code>\u62A5\u9519\uFF0C\u5C31\u7B49\u4E8E\u663E\u5F0F\u63D0\u9192\u6211\u4EEC\u9700\u8981\u6362\u53E6\u4E00\u4E2A\u5730\u5740\u65CF\u4E86\u3002</p></blockquote><p>\u4E0B\u9762\u7ED9\u51FA <code>listener.c</code>\u7684\u4EE3\u7801\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/*
** listener.c -- a datagram sockets &quot;server&quot; demo
*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MYPORT</span> <span class="token string">&quot;4950&quot;</span>    <span class="token comment">// the port users will be connecting to</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXBUFLEN</span> <span class="token expression"><span class="token number">100</span></span></span>

<span class="token comment">// get sockaddr, IPv4 or IPv6:</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">get_in_addr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>sa<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sa<span class="token operator">-&gt;</span>sa_family <span class="token operator">==</span> AF_INET<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token operator">*</span><span class="token punctuation">)</span>sa<span class="token punctuation">)</span><span class="token operator">-&gt;</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in6</span><span class="token operator">*</span><span class="token punctuation">)</span>sa<span class="token punctuation">)</span><span class="token operator">-&gt;</span>sin6_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sockfd<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> hints<span class="token punctuation">,</span> <span class="token operator">*</span>servinfo<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token keyword">int</span> rv<span class="token punctuation">;</span>
    <span class="token keyword">int</span> numbytes<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_storage</span> their_addr<span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAXBUFLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">socklen_t</span> addr_len<span class="token punctuation">;</span>
    <span class="token keyword">char</span> s<span class="token punctuation">[</span>INET6_ADDRSTRLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hints<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> hints<span class="token punctuation">)</span><span class="token punctuation">;</span>
    hints<span class="token punctuation">.</span>ai_family <span class="token operator">=</span> AF_INET6<span class="token punctuation">;</span> <span class="token comment">// set to AF_INET to use IPv4</span>
    hints<span class="token punctuation">.</span>ai_socktype <span class="token operator">=</span> SOCK_DGRAM<span class="token punctuation">;</span>
    hints<span class="token punctuation">.</span>ai_flags <span class="token operator">=</span> AI_PASSIVE<span class="token punctuation">;</span> <span class="token comment">// use my IP</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rv <span class="token operator">=</span> <span class="token function">getaddrinfo</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> MYPORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hints<span class="token punctuation">,</span> <span class="token operator">&amp;</span>servinfo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;getaddrinfo: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">gai_strerror</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// loop through all the results and bind to the first we can</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> servinfo<span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>ai_next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>ai_family<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>ai_socktype<span class="token punctuation">,</span>
                p<span class="token operator">-&gt;</span>ai_protocol<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;listener: socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>ai_addr<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>ai_addrlen<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;listener: bind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;listener: failed to bind socket\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">freeaddrinfo</span><span class="token punctuation">(</span>servinfo<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;listener: waiting to recvfrom...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    addr_len <span class="token operator">=</span> <span class="token keyword">sizeof</span> their_addr<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>numbytes <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> MAXBUFLEN<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>their_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr_len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;recvfrom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;listener: got packet from %s\\n&quot;</span><span class="token punctuation">,</span>
        <span class="token function">inet_ntop</span><span class="token punctuation">(</span>their_addr<span class="token punctuation">.</span>ss_family<span class="token punctuation">,</span>
            <span class="token function">get_in_addr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>their_addr<span class="token punctuation">)</span><span class="token punctuation">,</span>
            s<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;listener: packet is %d bytes long\\n&quot;</span><span class="token punctuation">,</span> numbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    buf<span class="token punctuation">[</span>numbytes<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;listener: packet contains \\&quot;%s\\&quot;\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u9700\u8981\u6CE8\u610F\u7684\u662F\uFF0C\u6211\u4EEC\u5728 <code>getaddrinfo()</code> \u65F6\uFF0C\u4F7F\u7528\u4E86 <code>SOCK_DGRAM</code>\u3002\u800C\u4E14\u6211\u4EEC\u6CA1\u6709\u4F7F\u7528 <code>listen()</code> \u6216\u8005 <code>accept()</code>\u51FD\u6570\uFF0C\u8FD9\u662F\u4F7F\u7528<code>unconnected datagram sockets</code>\u7684\u597D\u5904\u4E4B\u4E00\u3002</p><p>\u63A5\u4E0B\u6765\u770B\u4E00\u4E0B<code>talker</code>\u7684\u4EE3\u7801\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/*
** talker.c -- a datagram &quot;client&quot; demo
*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SERVERPORT</span> <span class="token string">&quot;4950&quot;</span>    <span class="token comment">// the port users will be connecting to</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sockfd<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> hints<span class="token punctuation">,</span> <span class="token operator">*</span>servinfo<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token keyword">int</span> rv<span class="token punctuation">;</span>
    <span class="token keyword">int</span> numbytes<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">&quot;usage: talker hostname message\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hints<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> hints<span class="token punctuation">)</span><span class="token punctuation">;</span>
    hints<span class="token punctuation">.</span>ai_family <span class="token operator">=</span> AF_INET6<span class="token punctuation">;</span> <span class="token comment">// set to AF_INET to use IPv4</span>
    hints<span class="token punctuation">.</span>ai_socktype <span class="token operator">=</span> SOCK_DGRAM<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rv <span class="token operator">=</span> <span class="token function">getaddrinfo</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> SERVERPORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hints<span class="token punctuation">,</span> <span class="token operator">&amp;</span>servinfo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;getaddrinfo: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">gai_strerror</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// loop through all the results and make a socket</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> servinfo<span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>ai_next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>ai_family<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>ai_socktype<span class="token punctuation">,</span>
                p<span class="token operator">-&gt;</span>ai_protocol<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;talker: socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;talker: failed to create socket\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>numbytes <span class="token operator">=</span> <span class="token function">sendto</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
             p<span class="token operator">-&gt;</span>ai_addr<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>ai_addrlen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;talker: sendto&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">freeaddrinfo</span><span class="token punctuation">(</span>servinfo<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;talker: sent %d bytes to %s\\n&quot;</span><span class="token punctuation">,</span> numbytes<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u4E9B\u5C31\u662F\u5168\u90E8\u4E86\u3002\u4F60\u5728\u67D0\u53F0\u4E3B\u673A\u4E0A\u6267\u884C<code>listener</code>\uFF0C\u7136\u540E\u5728\u53E6\u4E00\u53F0\u4E3B\u673A\u4E0A\u6267\u884C<code>talker</code>\uFF0C\u89C2\u5BDF\u5B83\u4EEC\u4E4B\u95F4\u7684\u901A\u4FE1\uFF0C\u4F60\u4F1A\u53D1\u73B0\u8FD9\u5F88\u6709\u8DA3\u3002</p><p>\u4F60\u751A\u81F3\u90FD\u53EF\u4EE5\u4E0D\u5148\u6267\u884CServer\uFF01\u53EF\u4EE5\u53EA\u6267\u884C<code>talker</code>\uFF0C<code>talker</code>\u4F1A\u5F88\u5F00\u5FC3\u5730\u5C06\u6570\u636E\u5305\u6254\u5230\u7F51\u7EDC\u4E0A\uFF0C\u5982\u679C\u53E6\u4E00\u6BB5\u6CA1\u6709\u4EBA\u8D1F\u8D23\u7528<code>recvfrom()</code>\u63A5\u6536\uFF0C\u5927\u4E0D\u4E86\u5C31\u662F\u6570\u636E\u5305\u4E22\u4E86\u800C\u5DF2\u3002</p><blockquote><p>\u8C28\u8BB0\uFF1A<code>UDP</code>\u53D1\u9001\u6570\u636E\u5E76\u4E0D\u4F1A\u4FDD\u8BC1\u6570\u636E\u4E00\u5B9A\u4F1A\u9001\u8FBE\u5BF9\u65B9\u3002</p></blockquote><p>\u8FD9\u91CC\u63D0\u4E00\u4E0B\u4E4B\u524D\u63D0\u8FC7\u5F88\u591A\u6B21\u7684\u4E00\u4E2A\u5C0F\u7EC6\u8282\uFF1A<code>connected datagram sockets</code>\uFF0C\u6BD5\u7ADF\u6211\u4EEC\u8FD9\u8282\u8BB2\u7684\u5C31\u662F<code>datagram socket</code>\u561B\u3002</p><p>\u5982\u679C<code>talker</code>\u8C03\u7528\u4E86<code>connect()</code>\u5E76\u4E14\u6307\u5B9A\u4E86<code>listener</code>\u7684\u5730\u5740\uFF0C\u8FD9\u6837\u4E00\u6765\uFF0C<code>talker</code>\u53EA\u80FD\u548C<code>connect()</code>\u6307\u5B9A\u7684\u5730\u5740\u8FDB\u884C\u6570\u636E\u53D1\u9001\u4E0E\u63A5\u6536\u3002\u8FD9\u5C31\u662F<code>connected datagram socket</code>\uFF0C\u4F60\u4E5F\u53EF\u4EE5\u4E0D\u5FC5\u5C40\u9650\u4E8E<code>sendto()</code>\u548C<code>recvfrom()</code>\uFF0C\u76F4\u63A5\u4F7F\u7528<code>send()</code>\u548C<code>recv()</code>\u5C31\u53EF\u4EE5\u4E86\u3002</p>`,15),o=[e];function c(i,l){return s(),a("div",null,o)}var k=n(p,[["render",c],["__file","Datagram-Sockets.html.vue"]]);export{k as default};
